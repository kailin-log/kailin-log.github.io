[{"content":"IoC容器 IoC容器介绍 ​\tSpring把每一个要管理的对象成为Spring Bean，Spring IoC容器是管理Spring Bean的容器。\n所有的IoC容器都需要实现顶层的BeanFactory接口。\nBeanFactory ​\tBeanFactory可以通过五种方式来从容器中获取一个Bean对象\n// 通过Bean的名称来获取Bean对象 Object getBean(String name) throws BeansException; // 通过Bean的名称和类型来获取一个Bean对象 \u0026amp;lt;T\u0026amp;gt; T getBean(String name, Class\u0026amp;lt;T\u0026amp;gt; requiredType) throws BeansException; // 通过Bean的类型来返回一个Bean对象 \u0026amp;lt;T\u0026amp;gt; T getBean(Class\u0026amp;lt;T\u0026amp;gt; requiredType) throws BeansException; Object getBean(String name, Object... args) throws BeansException; \u0026amp;lt;T\u0026amp;gt; T getBean(Class\u0026amp;lt;T\u0026amp;gt; requiredType, Object... args) throws BeansException; ​\t获取IoC容器中Bean信息的方法\n// 判度容器内是否含有名为name的Bean对象 boolean containsBean(String name); // 判断Bean对象是否是单例 boolean isSingleton(String name) throws NoSuchBeanDefinitionException; // 判断Bean对象是否是原型 boolean isPrototype(String name) throws NoSuchBeanDefinitionException; // 判断名为name的Bean对象的类型是否为typeToMatch boolean isTypeMatch(String name, Class\u0026amp;lt;?\u0026amp;gt; typeToMatch) throws NoSuchBeanDefinitionException; // 获取名为name的Bean对象的类型信息 Class\u0026amp;lt;?\u0026amp;gt; getType(String name) throws NoSuchBeanDefinitionException; Bean装配到IoC容器的方法 方法一：通过@Bean注解装配 ​\t配置文件定义\n@Configuration\t//代表配置文件, Spring容器根据配置文件来装配 public class AppConfig { @Bean(name=\u0026amp;#34;user\u0026amp;#34;) // 定义方法的返回值为一个Bean对象，name表示名称 \tpublic User initUser(){ User user = new User(); /*...... User的配置*/ return user; } } ​\t创建IoC容器（Spring通过一个@Configuration定义的配置文件创建容器）\nApplicationContext ctx = new AnnotationConfigApplicationContext(AppConfiguration.class); ​\t ApplicationContext是继承自BeanFactory的容器接口，AnnotationConfigApplicationContext是 Applicationontext的实现类，是一个基于注解的容器。\n通过@Bean装配的优势 ​\t可以自定义第三方Bean。\n方法二：通过@Component和@ComponentScan来扫描装配Bean ​\t使用@Component来表明哪个类要装配进容器，再通过@Value注解来指定类属性的值\n@Component public class User { @Value(\u0026amp;#34;1\u0026amp;#34;) private Long id; @Value(\u0026amp;#34;user_name_1\u0026amp;#34;) private String userName; ​\t使用@ComponentScan注解来扫描需要装配到容器的Bean\n@ComponentScan public class AppConfiguration {/* ... */} ​\t\t@ComponentScan注解标注的扫描类默认只会扫描对应类所在文件夹及其子文件夹下的Bean对象。(可以通过basePackages属性自定义扫描的包） …","date":1592834698,"description":"","lastmod":"2020-06-22T22:04:58+08:00","objectID":"ca36f4b2b25ea29b9d75286fb0122180","permalink":"https://kailin-log.github.io/spring-boot/ioc%E5%AE%B9%E5%99%A8/","publishdate":"2020-06-22T22:04:58+08:00","title":"IoC容器"}]